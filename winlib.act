MODULE
DEFINE WRECSZ="10"
DEFINE WBUFSZ="2968"
DEFINE TRUE  ="1"
DEFINE FALSE ="0"
DEFINE WON   ="1"
DEFINE WOFF  ="0"
DEFINE WPABS ="128"
DEFINE WPTOP ="241"
DEFINE WPBOT ="242"
DEFINE WPLFT ="251"
DEFINE WPRGT ="252"
DEFINE WPCNT ="255"
DEFINE WENONE="100"
DEFINE WENOPN="101"
DEFINE WEUSED="102"
DEFINE CCLS  ="$7D"
DEFINE CDLN  ="$9C"
DEFINE CUP   ="$1C"
DEFINE CDN   ="$1D"
DEFINE CLFT  ="$1E"
DEFINE CRGT  ="$1F"
DEFINE CRGT_I="159"
DEFINE CBUZ  ="$FD"
DEFINE CINVSP="$A0"
DEFINE KNOMAP="199"
DEFINE KNONE ="255" 
DEFINE KENTER="12"
DEFINE KDEL  ="52"
DEFINE KDEL_C="180"
DEFINE KDEL_S="116"
DEFINE KINS  ="183"
DEFINE KESC  ="28"
DEFINE KINV  ="39"
DEFINE KCAP  ="60"
DEFINE KLEFT ="134"
DEFINE KRIGHT="135"
DEFINE KUP   ="142"
DEFINE KDOWN ="143"
DEFINE KMINUS="14"
DEFINE KEQUAL="15"
DEFINE KPLUS ="6"
DEFINE KASTER="7"
DEFINE KSPACE="33"
DEFINE KTAB  ="44"
DEFINE KTAB_S="108"
DEFINE KB_C  ="149"
DEFINE KE_C  ="170"
DEFINE KX    ="22"
DEFINE KX_S  ="86"
DEFINE KE_CS ="234"
DEFINE KS_CS ="254"
DEFINE KCNON ="7"
DEFINE KCSTA ="262"
DEFINE KCSEL ="261"
DEFINE KCOPT ="259"
DEFINE GDISP ="0"
DEFINE GEDIT ="1"
DEFINE GHORZ ="1"
DEFINE GVERT ="2"
DEFINE GCON  ="1"
DEFINE GCOFF ="2"
DEFINE GANY  ="0"
DEFINE GALNUM="1"
DEFINE GALPHA="2"
DEFINE GNUMER="3"
DEFINE XESC  ="253"
DEFINE XTAB  ="254"
DEFINE XNONE ="255"

TYPE WnREC=[BYTE bS,bX,bY,bW,bH,bI CARD cM,cZ]
TYPE WnPOS=[BYTE vX,vY]
WnPOS vCur
WnREC POINTER pWn
CARD POINTER cpWM
BYTE ARRAY baW(110),baWM(WBUFSZ)
CARD RSCRN=88

PROC StrInv(CHAR POINTER pS BYTE bS)
 BYTE bL
 for bL=1 to bS 
 DO pS(bL)==!128 OD
RETURN

PROC StrAI(CHAR POINTER pS)
 BYTE bL
 for bL=1 to pS(0)
 DO
  if pS(bL)>=0 AND pS(bL)<=31 then
   pS(bL)==+64
  elseif pS(bL)>=32 AND pS(bL)<=95 then
   pS(bL)==-32
  elseif pS(bL)>=128 AND pS(bL)<=159 then
   pS(bL)==+64
  elseif pS(bL)>=160 AND pS(bL)<=223 then
   pS(bL)==-32
  fi
 OD
RETURN

PROC StrIA(CHAR POINTER pS)
 BYTE bL
 for bL=1 to pS(0)
 DO
  if pS(bL)>=0 AND pS(bL)<=63 then
   pS(bL)==+32
  elseif pS(bL)>=64 AND pS(bL)<=95 then
   pS(bL)==-64
  elseif pS(bL)>=128 AND pS(bL)<=154 then
   pS(bL)==+32
  elseif pS(bL)>=160 AND pS(bL)<=191 then
   pS(bL)==+32
  elseif pS(bL)>=192 AND pS(bL)<=223 then
   pS(bL)==-64
  fi
 OD
RETURN

PROC SubStr(CHAR ARRAY cB,cE BYTE bN,bS)
 BYTE bL=[0]
 FOR bL=1 to bS
 DO
  cE(bL)=cB(((bN-1)*bS)+bL)
 OD
 cE(0)=bS
RETURN

PROC StrPad(CHAR POINTER pS CHAR bC BYTE bL)
 CHAR ARRAY pA="          "
 SetBlock(pA+1,10,bC)
 SAssign(pA,pS,bL-pS(0)+1,bL)
 SCopy(pS,pA)
 pS(0)=bL
RETURN

PROC StrTrim(CHAR POINTER pS)
 BYTE bL,bC
 bL=pS(0)
 while bL>=1
 DO        
  if pS(bL)=32 then bC=bL-1
  else exit fi
  bL==-1
 OD
 pS(0)=bC
RETURN

PROC WInit()
 BYTE bL,CRSINH=$2F0,LMARGIN=$52
 CRSINH=1
 LMARGIN=0
 Setblock(baWM,WBUFSZ,0)
 cpWM=baWM
 for bL=0 to 10
 DO
  pWn=baW+(WRECSZ*bL)
  pWn.bS=WOFF
  pWn.bX=0
  pWn.bY=0
  pWn.bW=0
  pWn.bH=0
  pWn.bI=WOFF
  pWn.cM=baWM
  pWn.cZ=0
 OD
 vCur.vX=0
 vCur.vY=0
RETURN

PROC WBack(BYTE bN)
 SetBlock(RSCRN,960,bN)
RETURN

BYTE FUNC WOpen(BYTE x,y,w,h,bT)
 BYTE bR,bL,bD,bC
 CHAR ARRAY cL(40)
 CHAR POINTER pS
 bR=WENONE
 for bL=0 to 9
 DO
  pWn=baW+(WRECSZ*bL)
  if pWn.bS=WOFF then
   pWn.bS=WON
   pWn.cM=cpWM
   pWn.cZ=w*h
   pWn.bX=x
   pWn.bY=y
   pWn.bW=w
   pWn.bH=h
   pWn.bI=bT
   pS=RSCRN+(y*40)+x
   for bD=0 to h-1
    DO
     if bD=0 or bD=h-1 then
      SetBlock(cL,w,82)
      if bD=0 then
       cL(0)=81
       cL(w-1)=69
      else
       cL(0)=90
       cL(w-1)=67
      fi
     else
      SetBlock(cL,w,0)
      cL(0)=124
      cL(w-1)=124
     fi
     if bT=WON then
      for bC=0 to w-1
       DO
        cL(bC)==!128
       OD
     fi
     MoveBlock(cpWM,pS,w)
     cpWM==+w
     MoveBlock(pS,cL,w)
     pS==+40
    OD
   bR=bL
   EXIT
  fi
 OD
RETURN(bR)

BYTE FUNC WClose(BYTE bN)
 BYTE bR,bL
 CHAR POINTER pS,pA
 bR=WENOPN
 pWn=baW+(WRECSZ*bN)
 if pWn.bS#WOFF then
  pS=RSCRN+(pWn.bY*40)+pWn.bX
  pA=pWn.cM
  for bL=0 to pWn.bH-1
   DO
    MoveBlock(pS,pA,pWn.bW)
    pA==+pWn.bW
    pS==+40
   OD
  Setblock(pWn.cM,pWn.cZ,0)
  cpWM==-pWn.cZ
  pWn.bS=WOFF
  pWn.bX=0
  pWn.bY=0
  pWn.bW=0
  pWn.bH=0
  pWn.bI=WOFF
  pWn.cM=baWM
  pWn.cZ=0
  bR=0
 fi
RETURN(bR)

BYTE FUNC WStat(BYTE bN)
 pWn=baW+(WRECSZ*bN)
RETURN(pWn.bS)

BYTE FUNC WPos(BYTE bN,x,y)
 BYTE bR,CRSROW=$54
 CARD CRSCOL=$55
 bR=0
 if bN=WPABS then
  vCur.vX=x
  vCur.vY=y
 else
  pWn=baW+(WRECSZ*bN)
  if pWn.bS#WOFF then
   vCur.vX=pWn.bX+x
   vCur.vY=pWn.bY+y
  else
   bR=WENOPN
  fi
 fi
 CRSCOL=vCur.vX CRSROW=vCur.vY
RETURN(bR)

BYTE FUNC WPut(BYTE bN,x)
 BYTE bR
 CHAR ARRAY bC(2)
 CHAR POINTER pS
 bR=WENOPN
 bC(0)=1
 bC(1)=x
 pWn=baW+(WRECSZ*bN)
 if pWn.bS#WOFF then
  StrAI(bC)
  if pWn.bI=WON then
   bC(1)==!128
  fi
  pS=RSCRN+(vCur.vY*40)+vCur.vX
  MoveBlock(pS,bC+1,1)
  vCur.vX==+1
  bR=0
 fi
RETURN(bR)

BYTE FUNC WOrn(BYTE bN,bT,bL CHAR POINTER pS)
 BYTE bR
 CHAR ARRAY cL(36)
 CHAR POINTER cS
 bR=WENOPN
 pWn=baW+(WRECSZ*bN)
 if pWn.bS=WON then
  SCopy(cL+1,pS)
  cL(1)=4
  cL(pS(0)+2)=1
  cL(0)=pS(0)+2
  StrAI(cL)
  if pWn.bI=WON then StrInv(cL,cL(0))
  else StrInv(cL+1,cL(0)-2) fi
  cS=RSCRN+(pWn.bY*40)
  if bT=WPBOT then
   cS==+((pWn.bH-1)*40)
  fi
  if bL=WPLFT then
   cS==+pWn.bX+1
  elseif bL=WPRGT then
   cS==+pWn.bX+pWn.bW-pS(0)-3
  else
   cS==+pWn.bX+((pWn.bW-cL(0))/2)
  fi
  MoveBlock(cS,cL+1,cL(0))
  bR=0
 fi
RETURN(bR)

BYTE FUNC WTitle(BYTE bN CHAR POINTER pS)
RETURN(WOrn(bN,WPTOP,WPLFT,pS))

BYTE FUNC WPrint(BYTE bN,x,y CHAR POINTER pS)
 BYTE bR
 CHAR ARRAY cL(129)
 CHAR POINTER cS
 bR=WENOPN
 pWn=baW+(WRECSZ*bN)
 if pWn.bS#WOFF then
  SCopy(cL,pS)
  if cL(0) > pWn.bW-x-1 then
   cL(0)=pWn.bW-x-1 fi
  StrAI(cL)
  if pWn.bI=WON then
   StrInv(cL,cL(0)) fi
  cS=RSCRN+(pWn.bY*40)+pWn.bX
  cS==+(y*40)
  if x#WPCNT then cS==+x
  else cS==+((pWn.bW-cL(0))/2) fi
  MoveBlock(cS,cL+1,cL(0))
  bR=0
 fi
RETURN(bR)

BYTE FUNC WClr(BYTE bN)
 BYTE bR,bL
 CHAR ARRAY cL(38)
 CHAR POINTER cS
 bR=WENOPN
 pWn=baW+(WRECSZ*bN)
 if pWn.bS=WON then
  cS=RSCRN+(pWn.bY*40)+pWn.bX+41
  SetBlock(cL,pWn.bW-2,0)
   if pWn.bI=WON then
    StrInv(cL,pWn.bW-2)
   fi
  for bL=1 to pWn.bH-2
   DO
    MoveBlock(cS,cL,pWn.bW-2)
    cS==+40
   OD
  bR=0
 fi
RETURN(bR)

BYTE FUNC WDiv(BYTE bN,y,bD)
 BYTE bR,bE
 CHAR ARRAY cL(40)
 CHAR POINTER cS
 bR=WENOPN
 pWn=baW+(WRECSZ*bN)
 if pWn.bS=WON then bE=pWn.bW
  if bD=WON then
   SetBlock(cL,bE,82)
   cL(1)=65
   cL(bE)=68
  else
   SetBlock(cL,bE,0)
   cL(1)=124
   cL(bE)=124
  fi
  cL(0)=bE
  if pWn.bI=WON then
   StrInv(cL,cL(0)) fi
  cS=RSCRN+((pWn.bY+y)*40)+pWn.bX
  MoveBlock(cS,cL+1,cL(0))
  bR=0
 fi
RETURN(bR)

BYTE FUNC IKC2ATA(BYTE bN)
 CHAR ARRAY cL(192)=[
 108 106  59 199 199 107  43  42 111 199
 112 117 155 105  45  61 118 199  99 199
 199  98 120 122  52 199  51  54 199  53
 50  49  44  32  46 110 199 109  47 199
 114 199 101 121 199 116 119 113  57 199
 48  55 199  56  60  62 102 104 100 199
 199 103 115  97  76  74  58 199 199  75
 92  94  79 199  80  85 199  73  95 124
 86 199  67 199 199  66  88  90  36 199
 35  38 199  37  34  33  91  32  93  78
 199 77  63 199  82 199  69  89 199  84
 87  81  40 199  41  39 199  64 199 199
 70  72  68 199 199  71  83  65  12  10
 123 199 199  11 199 199  15 199  16  21
 199 9 199 199  22 199   3 199 199   2
 24  26 199 199 199 199 199 199 199 199
 199 199  96  14 199  13 199 199  18 199
 5 25 199  20  23  17 199 199 199 199
 199 199 199 199   6   8   4 199 199   7
 19$1]
 BYTE bR
 if bN<192 then bR=cL(bN)
 else bR=bN fi
RETURN(bR)

PROC Wait(BYTE bN)
 BYTE RTCLK=20,bS
 RTCLK=0
 bS=0
 while bS<bN
 DO
  if RTCLK>=60 then bS==+1 RTCLK=0 fi
 OD
RETURN

BYTE FUNC WaitYN(BYTE bE)
 BYTE bRCH=764,bR=[0],bK=[0]
 DO
  WHILE bRCH=KNONE DO OD
  bK=bRCH
  bRCH=KNONE
  UNTIL bK=43 OR bK=107 OR
        bK=35 OR bK=99
 OD
 if bK=43 OR bK=107 then bR=1 fi
 if bE=1 then
  if bR=1 then Put('Y)
  else Put('N) fi
 fi
RETURN(bR)

CARD FUNC WaitKC()
 BYTE bRCH=764,bRCO=53279,bCAP=702
 CARD cB=[0]
 WHILE bRCH=KNONE AND bRCO=KCNON
 DO OD
 if bRCO#KCNON then cB=bRCO+256
 elseif bRCH=KCAP then
  cB=bRCH bCAP=bCAP!64
 else cB=bRCH bRCH=KNONE fi
RETURN(cB)

BYTE FUNC GCheck(BYTE bN,x,y,bI,bD)
 BYTE bR,bK,bC
 bR=bD
 bC=bD
 DO
  if bC=GCON then
   WPrint(bN,x,y,"[�]")
  else
   WPrint(bN,x,y,"[�]")
  fi
  if bI=GDISP then
   exit
  else
   bK=WaitKC()
   if bK=KESC then bR=XESC exit
   elseif bK=KTAB then bR=XTAB exit
   elseif bK=KSPACE or bK=KX or bK=KX_S then
    if bC=GCON then bC=GCOFF
    else bC=GCON fi
    bR=bC
    exit
   elseif bK=KENTER then bR=bC exit
    fi
  fi
 OD
 if bR=bC then
  if bR=GCON then WPrint(bN,x,y,"[X]")
  else WPrint(bN,x,y,"[ ]") fi
 else
  if bD=GCON then WPrint(bN,x,y,"[X]")
  else WPrint(bN,x,y,"[ ]") fi
 fi
RETURN(bR)

BYTE FUNC GRadio(BYTE bN,x,y,bD,bE,bI,bS CARD POINTER pA)
 BYTE bR,bL,bK,bC,xp,yp
 CHAR POINTER pS
 bR=bI
 bC=bI
 DO
  xp=0
  yp=0
  for bL=1 to bS
  DO
   if bL=bC and bE#GDISP then
    WPos(bN,x+xp,y+yp)
    WPut(bN,CRGT_I)
   else
    WPrint(bN,x+xp,y+yp," ")
   fi
    if bL=bR then
      WPrint(bN,x+xp+1,y+yp,"�");CTRL+T
    else
      WPrint(bN,x+xp+1,y+yp,"o")
    fi
    WPrint(bN,x+xp+3,y+yp,pA(bL-1))
    if bD=GHORZ then
      pS=pA(bL-1)
      xp==+(pS(0)+4)
    else
      yp==+1
    fi        
  OD
  if bE=GDISP then exit
  else bK=WaitKC()
   if bK=KLEFT or bK=KPLUS or bK=KUP or bK=KMINUS then
    bC==-1
     if bC<1 then bC=bS fi
   elseif bK=KRIGHT or bK=KASTER or bK=KDOWN or bK=KEQUAL then
    bC==+1
     if bC>bS then bC=1 fi
   elseif bK=KESC then bR=XESC exit
   elseif bK=KTAB then bR=XTAB exit
   elseif bK=KSPACE then bR=bC
   elseif bK=KENTER then bR=bC exit
   fi
  fi
 OD
RETURN(bR)

BYTE FUNC GButton(BYTE bN,x,y,bD,bS CARD POINTER pA)
 BYTE bR,bL,bK,bP
 CHAR POINTER pS
 CHAR ARRAY cL(39)
 bR=bD
 DO
  bP=0
  for bL=1 to bS
  DO
   pS=pA(bL-1)
   SCopy(cL,pS)
   if bR=bL then
    StrInv(cL,cL(0))
   fi
   WPrint(bN,x+bP,y,cL)
   bP==+pS(0)
  OD
  if bD=GDISP then
   exit
  else
   bK=WaitKC()
   if bK=KLEFT or bK=KPLUS or bK=KUP or bK=KMINUS then
    bR==-1
   if bR<1 then bR=bS fi
   elseif bK=KRIGHT or bK=KASTER or bK=KDOWN or bK=KEQUAL then
    bR==+1
    if bR>bS then bR=1 fi
   elseif bK=KESC then bR=XESC
    exit
   elseif bK=KTAB then bR=XTAB
    exit
   elseif bK=KENTER then exit fi
  fi
 OD
RETURN(bR)

PROC GAlert(CHAR POINTER pS)
 BYTE bT,x
 x=((38-pS(0))/2)
 bT=WOpen(x, 9, pS(0)+2, 4, WOFF)
 WTitle(bT, "Alert")
 WPrint(bT, WPCNT, 1, pS) 
 WPrint(bT, WPCNT, 2,"��ˠ")
 WaitKC()
 WClose(bT)
RETURN

PROC GProg(BYTE bN,x,y,bS)
 INT bL
 CHAR ARRAY cL(21),cB(21)
 SCopy(cL,"                    ")
 for bL=1 to bS/5
  DO
   cL(bL)=CINVSP
  OD
 WPrint(bN,x,y,cL)
RETURN

BYTE FUNC GInput(BYTE bN,x,y,bT,bS CHAR POINTER pS)
 CHAR ARRAY cD(41),cE(128)
 BYTE bR,bD,bE,bK,bC,bL,bP
 bR=FALSE
 bD=1
 bE=1
 SCopy(cE,pS)
 DO
  SCopyS(cD,cE,bD,bD+bS-1)
  StrInv(cD,bS)
  cD(bE-bD+1)==!128  
  WPrint(bN, x, y, cD)
  bK=WaitKC()
  bC=IKC2ATA(bK)
  if bK=KRIGHT then bE==+1
  elseif bK=KLEFT then bE==-1
  elseif bK=KS_CS then bE=1
  elseif bK=KE_CS then bE=pS(0)
  elseif bK=KDEL then
   if bE>1 then bE==-1 fi
   cE(bE)=32
  elseif bK=KDEL_S then
   SetBlock(cE+1,pS(0),32)
  elseif bK=KDEL_C then
   for bL=bE+1 to pS(0)
   DO cE(bL-1)=cE(bL) OD
   bL=pS(0)
   cE(bL)=32
  elseif bK=KINS then
   if bE<pS(0) then bL=pS(0)
    DO
     cE(bL)=cE(bL-1)
     bL==-1
     UNTIL bL=bE
    OD
    cE(bE)=32
   fi
  elseif bK=KENTER then
   SCopy(pS,cE)
   bR=TRUE
   exit
  elseif bK=KESC then
   SCopy(cE,pS)
   bR=XESC
   exit
  elseif bK=KTAB then
   SCopy(cE,pS)
   bR=XTAB
   exit
  elseif bC>=1 and bC<=191 then
   bP=FALSE
   if bT=GANY and (bC<=28 or bC>=32) then
    bP=TRUE
   elseif bT=GALNUM then
    if bC=32 or (bC>=48 and bC<=57) or (bC>=65 and bC<=90) or (bC>=97 and bC<=122) then
     bP=TRUE
    fi 
   elseif bT=GALPHA then
    if bC=32 or (bC>=65 and bC<=90) or (bC>=97 and bC<=122) then
     bP=TRUE
    fi
   elseif bT=GNUMER then
    if bC=45 or bC=46 or (bC>=48 and bC<=57) then
     bP=TRUE
    fi
   fi
    if bP=TRUE then
      cE(bE)=bC
      bE==+1  
    fi
  fi

  if bE>pS(0) then bE=pS(0)
  elseif bE<1 then bE=1 fi

  if bE>=bS then bD=bE-bS+1
  elseif bE<bS then bD=1 fi
 OD
 SCopyS(cD,cE,1,bS)
 WPrint(bN,x,y,cD)
RETURN(bR)

BYTE FUNC GSpin(BYTE bN,x,y,bL,bM,bP)
 BYTE bD,bK,bR
 CHAR ARRAY cL(4)
 bD=bP
 DO
  StrB(bD,cL)
  StrPad(cL,32,3)
  StrInv(cL,cL(0))
  WPrint(bN,x,y,cL)
  bK=WaitKC()
  if bK=KLEFT or bK=KPLUS or bK=KDOWN or bK=KEQUAL then
    bD==-1
    if bD<bL then bD=bL fi
  elseif bK=KRIGHT or bK=KASTER or bK=KUP or bK=KMINUS then
   bD==+1
   if bD>bM then bD=bM fi
  elseif bK=KESC then
   bR=XESC StrB(bP,cL) exit
  elseif bK=KTAB then
   bR=XTAB StrB(bP,cL) exit
  elseif bK=KENTER then
   bR=bD StrB(bD,cL) exit
  fi
 OD
 StrPad(cL,32,3)
 WPrint(bN,x,y,cL)
RETURN(bR)

BYTE FUNC MenuV(BYTE bN,x,y,bI,bD,bS CHAR POINTER pS)
 BYTE bL,bR,bP,bC,bT,bK
 CHAR ARRAY cL(39)
 bR=bD
 bC=pS(0)/bS
 DO
  for bL=0 to bC        
   DO
    bP=(bL*bS)+1
    SCopyS(cL,pS,bP,bP+bS-1)    
    if bL+1=bR then
     for bT=1 to cL(0)
      DO 
       cL(bT)==!128
      OD
    fi
    WPrint(bN,x,y+bL,cL)
   OD
  bK=WaitKC()
  if bK=KDOWN or bK=KEQUAL or bK=KRIGHT or bK=KASTER then
   bR==+1
    if bR>bC then bR=1 fi
    elseif bK=KUP or bK=KMINUS or bK=KLEFT or bK=KPLUS then
     bR==-1
      if bR<1 then bR=bC fi 
    fi
   bL=bR
   if bK=KESC then bR=XESC exit
   elseif bK=KTAB then bR=XTAB exit
   elseif bK=KENTER then exit
  fi
 OD
 if bI=WOFF then
  bP=((bL-1)*bS)+1
  SCopyS(cL,pS,bP,bP+bS-1)
  WPrint(bN,x,y+bL-1,cL)
 fi
RETURN(bR)

MODULE
